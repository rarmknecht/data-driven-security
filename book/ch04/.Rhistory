install.packages("kernsmooth")
install.packages("KernSmooth")
library("KernSmooth")
library("kernsmooth"
)
library()
install.packages("KernSmooth")
library("KernSmooth")
location <- "/Github/data-driven-security/"
setwd(paste("~",location,"book/ch04",sep=""))
# ensure necessary packages are installed
pkg <- c("bitops","ggplot2","maps","maptools",
"sp","grid","car","reshape","gridExtra",
"igraph","plyr","colorspace")
new.pkg <- pkg[!(pkg %in% installed.packages())]
if(length(new.pkg)) {install.packages(new.pkg)}
library(bitops)
# ip2long - convert an ip "xx.xx.xx.xx" to a long int
ip2long <- function(ip) {
# convert string to character vector
ips <- unlist(strsplit(ip,'.',fixed=TRUE))
# setup a function to bitshift and OR the octets
octet <- function(x,y) { bitOr(bitShiftL(x,8),y) }
# reduce applies the function cumulatively from left to right
Reduce(octet, as.integer(ips))
}
# long2ip - convert a long int to an ip address
long2ip <- function(longip) {
# setup reverse bit manipulation
octet <- function(nbits) { bitAnd(bitShiftR(longip, nbits),0xFF) }
# Map applies a function to each element of the argument
# paste converts arguments to character and concatenates them
paste(Map(octet,c(24,16,8,0)), sep="", collapse=".")
}
# testing the ip2long & long2ip functions
long2ip(ip2long("10.10.57.14"))
# Additional Utility Function / Listing 4-2
ip.is.in.cidr <- function(ip,cidr) {
long.ip <- ip2long(ip)
cidr.parts <- unlist(strsplit(cidr,"/"))
cidr.range <- ip2long(cidr.parts[1])
cidr.mask <- bitShiftL(bitFlip(0),(32-as.integer(cidr.parts[2])))
return(bitAnd(long.ip, cidr.mask) == bitAnd(cidr.range,cidr.mask))
}
library(ggplot2)
library(maps)
library(RColorBrewer)
library(scales)
# extract a color palette from the RColorBrewer pkg
set2 <- brewer.pal(8,"Set2")
# extract the polygon info for the world map, minus Antarctica
world <- map_data("world")
world <- subset(world, region != "Antarctica")
# plot the map with the points marking lat/long of the geocoded entries
# see chapter 5 for more mapping details
gg <- ggplot()
gg <- gg + geom_polygon(data=world, aes(long, lat, group=group), fill="white")
gg <- gg + geom_point(data=av.coords.df, aes(x=long, y=lat),
color=set2[2], size=1, alpha=0.1)
gg <- gg + labs(x="", y="")
gg <- gg + theme(panel.background=element_rect(fill=alpha(set2[3],0.2),
colour="white"))
gg
# Listing 4-3 / Prepare AlienVault GeoIP Data for mapping
# --------------------------------------------------------
# read in the alienvault data
avRep <- "data/reputation.data"
av.df <- read.csv(avRep, sep="#", header=FALSE)
colnames(av.df) <- c("IP","Reliability","Risk","Type",
"Country", "Locale", "Coords", "x")
# create a vector of lat/long data by splitting on ","
av.coords.vec <- unlist(strsplit(as.character(av.df$Coords),","))
# convert the vector into a 2-column matrix
av.coords.mat <- matrix(av.coords.vec, ncol=2, byrow=TRUE)
# project into a data frame
av.coords.df <- as.data.frame(av.coords.mat)
# name the columns
colnames(av.coords.df) <- c("lat","long")
# convert the characters to numerica values
av.coords.df$long <- as.double(as.character(av.coords.df$long))
av.coords.df$lat <- as.double(as.character(av.coords.df$lat))
# Listing 4-4 / Time to Map the Data!
# -------------------------------------
library(ggplot2)
library(maps)
library(RColorBrewer)
library(scales)
# extract a color palette from the RColorBrewer pkg
set2 <- brewer.pal(8,"Set2")
# extract the polygon info for the world map, minus Antarctica
world <- map_data("world")
world <- subset(world, region != "Antarctica")
# plot the map with the points marking lat/long of the geocoded entries
# see chapter 5 for more mapping details
gg <- ggplot()
gg <- gg + geom_polygon(data=world, aes(long, lat, group=group), fill="white")
gg <- gg + geom_point(data=av.coords.df, aes(x=long, y=lat),
color=set2[2], size=1, alpha=0.1)
gg <- gg + labs(x="", y="")
gg <- gg + theme(panel.background=element_rect(fill=alpha(set2[3],0.2),
colour="white"))
gg
library(reshape)
library(grid)
library(gridExtra)
BulkOrigin <- function(ip.list,host="v4.whois.cymru.com",port=43) {
# setup query
cmd <- "begin\nverbose\n"
ips <- paste(unlist(ip.list), collapse="\n")
cmd <- sprintf("%s%s\nend\n",cmd,ips)
# setup connection and post query
con <- socketConnection(host=host,port=port,blocking=TRUE,open="r+")
cat(cmd,file=con)
response <- readLines(con)
close(con)
# trim header, split fields and convert results
response <- response[2:length(response)]
response <- laply(response,.fun=function(n) {
sapply(strsplit(n,"|",fixed=TRUE),trim)
})
response <- adply(response,c(1))
response <- subset(response, select = -c(X1) )
names(response) = c("AS","IP","BGP.Prefix","CC",
"Registry","Allocated","AS.Name")
return(response)
}
# HELPER FUNCTION MENTIONED IN THE BOOK
# BUT NOT IN THE PRINTED LISTINGS
BulkPeer <- function(ip.list,host="v4-peer.whois.cymru.com",port=43) {
# setup query
cmd <- "begin\nverbose\n"
ips <- paste(unlist(ip.list), collapse="\n")
cmd <- sprintf("%s%s\nend\n",cmd,ips)
# setup connection and post query
con <- socketConnection(host=host,port=port,blocking=TRUE,open="r+")
cat(cmd,file=con)
response <- readLines(con)
close(con)
# trim header, split fields and convert results
response <- response[2:length(response)]
response <- laply(response,function(n) {
sapply(strsplit(n,"|",fixed=TRUE),trim)
})
response <- adply(response,c(1))
response <- subset(response, select = -c(X1) )
names(response) <- c("Peer.AS","IP","BGP.Prefix","CC",
"Registry","Allocated","Peer.AS.Name")
return(response)
}
# HELPER FUNCTION MENTIONED IN THE BOOK
# BUT NOT IN THE PRINTED LISTINGS
BulkOriginASN <- function(asn.list,host="v4.whois.cymru.com",port=43) {
# setup query
cmd <- "begin\nverbose\n"
ips <- paste(unlist(asn.list), collapse="\n")
cmd <- sprintf("%s%s\nend\n",cmd,ips)
# setup connection and post query
con <- socketConnection(host=host,port=port,blocking=TRUE,open="r+")
cat(cmd,file=con)
response <- readLines(con)
close(con)
# trim header, split fields and convert results
response <- response[2:length(response)]
response <- laply(response,.fun=function(n) {
sapply(strsplit(n,"|",fixed=TRUE),trim)
})
response <- adply(response,c(1))
response <- subset(response, select = -c(X1) )
names(response) <- c("AS","CC","Registry","Allocated","AS.Name")
return(response)
}
# Listing 4-12 / Zeus Graph Structure by Country
# ----------------------------------------------)----
library(igraph)
library(plyr)
library(colorspace)
avRep <- "data/reputation.data"
av.df <- read.cvs(avRep,sep="#",header=FALSE)
av.df <- read.csv(avRep,sep="#",header=FALSE)
colnames(av.df) <- c("IP","Reliability","Risk","Type","Country","Locale","Coords","x")
dest.ips <- read.csv("data/dest.ips", col.names=c("IP"))
table(av.df[av.df$IP %in% dest.ips$IP, ]$Reliability)
ips <- as.character(av.df[(av.df$IP %in% dest.ips$IP) &
(av.df$Reliability > 6), ]$IP)
g.cc <- graph.cc(ips,av.df)
library(igraph)
g.cc <- graph.cc(ips,av.df)
library(igraph)
library(plyr)
library(colorspace)
graph.cc <- function(ips, alien.vault.df, show.plot=TRUE) {
options("warn" = -1)
# Lookup ASN info for the incoming IP list which will
# have country of origin info that's fairly accurate
origin <- BulkOrigin(ips)
# filter out IP and Type from the alienvault DB only for our ip list
ips.types <- alien.vault.df[alien.vault.df$IP %in% ips,c(1,2,4)]
# get a tabular summary of the types and counts
ftab <- table(factor(ips.types[ips.types$IP %in% ips,]$Type))
# build a color table from the tabular summary
# myColors <- rainbow_hcl(length(names(ftab)),c=60,l=70,start=20)
myColors <- set2
col.df <- data.frame(Type=names(ftab),Color=myColors)
# begin graph creation
g <- graph.empty()
# add our ip list as the starting vertices
g <- g + vertices(ips,size=3,group=1)
# i don't the df is necessary anymore...will test later
ips.df <- data.frame(ips)
colnames(ips.df) <- c("IP")
# get the current list of vertex names...i think i can remove this too
v.names <- V(g)$name
# assign colors to the vertices based on the type
V(g)$color <- as.character(col.df[col.df$Type %in% ips.types[ips.types$IP %in% v.names,]$Type,]$Color)
# add country vertices
g <- g + vertices(
unique(origin$CC),
size=3,color="black",group=2)
# build country->ip edges
ip.cc.edges <- lapply(ips,function(x) {
iCC <- origin[origin$IP==x,]$CC
lapply(iCC,function(y){
c(x,y)
})
})
# add edges
g <- g + edges(unlist(ip.cc.edges))
# simplify (though it's almost not necessary given the low
# complexity of the graph)
g <- simplify(g, edge.attr.comb=list(weight="sum"))
# remove lone wolf vertices
g <- delete.vertices(g, which(degree(g) < 1))
# arrows: ugh
E(g)$arrow.size <- 0
# we only want to see country labels, not IPs
V(g)[grep("[0-9]",V(g)$name)]$name <- ""
# 10000 makes pretty graphs and takes a pretty long time
L <- layout.fruchterman.reingold(g, niter=10000, area=30*vcount(g)^2)
# for when I add community options
c <- walktrap.community(g, steps=10)
v <- evcent(g)$vector
if (show.plot) {
def.par <- par(no.readonly = TRUE)
par(bg = 'white')
layout(matrix(c(1,2,3,1), 1, 2, byrow = TRUE), widths=c(5,1))
plot(g,margin=0,layout=L,vertex.label.dist=0.6,
vertex.label.cex=0.75,
vertex.label.color="black",
vertex.label.family="sans",
vertex.label.font=2)
par(mar=c(5,0,2,2))
barplot(ftab,horiz=TRUE,las=1,cex.names=0.75,cex.axis=0.75,
col=as.character(col.df[col.df$Type %in% unlist(labels(ftab)),]$Color))
par(def.par)
}
options("warn" = 0)
return(g)
}
# ADDITIONAL HELPER FUNCTION MENTIONED IN THE BOOK BUT NOT PRINTED
graph.asn <- function(ips,alien.vault.df,add.peers=FALSE,show.plot=TRUE,show.labels=FALSE) {
options("warn" = -1)
# Lookup ASN info for the incoming IP list
origin <- BulkOrigin(ips)
if (add.peers) { # and peers if specified
peers <- BulkPeer(ips)
}
# filter out IP and Type from the alienvault DB only for our ip list
ips.types <- alien.vault.df[alien.vault.df$IP %in% ips,c(1,2,4)]
# get a tabular summary of the types and counts
ftab <- table(factor(ips.types[ips.types$IP %in% ips,]$Type))
# build a color table from the tabular summary
#myColors <- rainbow_hcl(length(names(ftab)),c=60,l=70,start=20)
myColors <- set2
col.df <- data.frame(Type=names(ftab),Color=myColors)
# begin graph creation
g <- graph.empty()
# add our ip list as the starting vertices
g <- g + vertices(ips,size=3,group=1)
# i don't think the df is necessary anymore...will test later
ips.df <- data.frame(ips)
colnames(ips.df) <- c("IP")
# get the current list of vertex names...i think i can remove this too
v.names <- V(g)$name
# assign colors to the vertices based on the type
V(g)$color <- as.character(col.df[col.df$Type %in% ips.types[ips.types$IP %in% v.names,]$Type,]$Color)
# add BGP->IP vertices and - if requested - add peer ASN vertices
if (add.peers) {
g <- g + vertices(
unique(c(peers$Peer.AS, origin$AS)),
size=4,color="black",group=2)
} else {
g <- g + vertices(
unique(origin$AS),
size=4,color="black", group=2)
}
# Make IP/BGP edges
ip.edges <- lapply(ips,function(x) {
iAS <- origin[origin$IP==x,]$AS
lapply(iAS,function(y){
c(x,y)
})
})
if (add.peers) { # same for peers if specified
bgp.edges <- lapply(
grep("NA",unique(origin$BGP.Prefix),value=TRUE,invert=TRUE),
function(x) {
startAS <- unique(origin[origin$BGP.Prefix==x,]$AS)
lapply(startAS,function(z) {
pAS <- peers[peers$BGP.Prefix==x,]$Peer.AS
lapply(pAS,function(y) {
c(z,y)
})
})
})
}
# build ASN->IP edges
g <- g + edges(unlist(ip.edges))
if (add.peers) { # same for peers if specified
g <- g + edges(unlist(bgp.edges))
}
# simplify the structure (prbly needed since it's already
# well organized w/o dupes
g <- simplify(g, edge.attr.comb=list(weight="sum"))
# delete any standalone vertices (lone wolf ASNs)
g <- delete.vertices(g, which(degree(g) < 1))
# arrows: ugh
E(g)$arrow.size <- 0
# if we do show labels, we only want to see the ASNs
V(g)[grep("\\.",V(g)$name)]$name <- ""
# 10000 makes it pretty...and pretty slow
L <- layout.fruchterman.reingold(g, niter=10000,
area=30*vcount(g)^2)
# shld make an options parameter and if-block this
c <- walktrap.community(g, steps=10)
v <- evcent(g)$vector
if (show.plot) {
def.par <- par(no.readonly = TRUE)
par(bg = 'white')
layout(matrix(c(1,2,3,1), 1, 2, byrow = TRUE),
widths=c(5,1))
if (show.labels) {
plot(g,
margin=0,
layout=L,
vertex.label.dist=0.6,
vertex.label.cex=0.75,
vertex.label.color="black",
vertex.label.family="sans",
vertex.label.font=2)
} else {
plot(g,margin=0,vertex.label=NA,layout=L)
}
par(mar=c(5,0,2,2))
barplot(ftab,horiz=TRUE,las=1,cex.names=0.75,cex.axis=0.75,
col=as.character(
col.df[col.df$Type %in% unlist(labels(ftab)),]$Color))
par(def.par)
}
options("warn" = 0)
return(g)
}
g.cc <- graph.cc(ips,av.df)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
g.cc <- graph.cc(ips,av.df)
